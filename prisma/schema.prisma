// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String
  userType      String
  isActive      Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  questions     Questions[]
  answerOptions AnswerOptions[]
  Tests         Tests[]
  TestCategory  TestCategory[]
}

model Questions {
  id                   Int                      @id @default(autoincrement())
  question             String                   @db.Text
  type                 String
  category             String
  createdBy            User                     @relation(fields: [createUserId], references: [id])
  createUserId         Int
  createdOn            DateTime
  updatedOn            DateTime                 @default(now())
  answers              QuestionAnswerMappings[]
  testQuestionMappings TestQuestionMappings[]
  TestResponseDetails  TestResponseDetails[]
}

model AnswerOptions {
  id                  Int                      @id @default(autoincrement())
  answer              String
  category            String
  createdBy           User                     @relation(fields: [createUserId], references: [id])
  createUserId        Int
  createdOn           DateTime
  updatedOn           DateTime                 @default(now())
  questions           QuestionAnswerMappings[]
  TestResponseDetails TestResponseDetails[]
}

model QuestionAnswerMappings {
  id                   Int                    @id @default(autoincrement())
  question             Questions              @relation(fields: [questionId], references: [id])
  questionId           Int
  answerOption         AnswerOptions          @relation(fields: [answerOptionId], references: [id])
  answerOptionId       Int
  isCorrect            Boolean
  sortOrder            Int                    @default(1)
  TestQuestionMappings TestQuestionMappings[]
}

model Tests {
  id                   Int                    @id @default(autoincrement())
  name                 String
  description          String
  category             String
  questionSortOrder    String
  status               String
  testAccessMode       String                 @default("AccessCode")
  createdBy            User                   @relation(fields: [createUserId], references: [id])
  createUserId         Int
  createdOn            DateTime
  updatedOn            DateTime               @default(now())
  testQuestionMappings TestQuestionMappings[]
  TestAccessCodes      TestAccessCodes[]
  TestResponse         TestResponse[]
}

model TestQuestionMappings {
  id                      Int                    @id @default(autoincrement())
  test                    Tests                  @relation(fields: [testId], references: [id])
  testId                  Int
  questionAnswerMapping   QuestionAnswerMappings @relation(fields: [questionAnswerMappingId], references: [id])
  questionAnswerMappingId Int
  sortOrder               Int                    @default(1)
  Questions               Questions?             @relation(fields: [questionsId], references: [id])
  questionsId             Int?
}

model TestAccessCodes {
  id           Int        @id @default(autoincrement())
  test         Tests      @relation(fields: [testId], references: [id])
  testId       Int
  respondent   Respondent @relation(fields: [respondentId], references: [id])
  respondentId Int
  updatedOn    DateTime   @default(now())
}

model Respondent {
  id              Int               @id @default(autoincrement())
  email           String?
  firstName       String?
  lastName        String?
  timeZone        String?
  updatedOn       DateTime          @default(now())
  TestAccessCodes TestAccessCodes[]
  TestResponse    TestResponse[]
}

model TestResponse {
  id                  Int                   @id @default(autoincrement())
  test                Tests                 @relation(fields: [testId], references: [id])
  testId              Int
  respondent          Respondent            @relation(fields: [respondentId], references: [id])
  respondentId        Int
  startedOn           DateTime
  submittedOn         DateTime
  status              String                @default("Pending") // Pending, InProgress, Paused, Submitted
  score               Int
  updatedOn           DateTime              @default(now())
  TestResponseDetails TestResponseDetails[]
}

model TestResponseDetails {
  id             Int           @id @default(autoincrement())
  testResponse   TestResponse  @relation(fields: [testResponseId], references: [id])
  testResponseId Int
  question       Questions     @relation(fields: [questionId], references: [id])
  questionId     Int
  answerOption   AnswerOptions @relation(fields: [answerOptionId], references: [id])
  answerOptionId Int
  answeredOn     DateTime      @default(now())
}

model TestCategory {
  id           Int      @id @default(autoincrement())
  name         String
  createdBy    User     @relation(fields: [createUserId], references: [id])
  createUserId Int
  updatedOn    DateTime @default(now())
}
